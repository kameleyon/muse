import html2pdf from 'html2pdf.js';
import { Document, Paragraph, TextRun, HeadingLevel, Packer, Header, Footer } from 'docx';
import { marked } from 'marked';

// Interface for export options
export interface ExportOptions {
  filename?: string;
  title?: string;
  author?: string;
  dateCreated?: Date;
  includeMetadata?: boolean;
}

/**
 * ContentExporter service for converting and downloading content in various formats
 */
export class ContentExporter {
  /**
   * Convert markdown to HTML with optional metadata
   */
  public markdownToHtml(markdown: string, options: ExportOptions = {}): string {
    const {
      title = 'Untitled Document',
      author = 'MagicMuse.io',
      dateCreated = new Date(),
      includeMetadata = true,
    } = options;

    // Convert markdown to HTML content
    const contentHtml = marked(markdown);

    // Create HTML document with optional metadata
    let html = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>${title}</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1, h2, h3, h4, h5, h6 {
            color: #2D3142;
            margin-top: 1.5em;
            margin-bottom: 0.5em;
        }
        h1 { font-size: 2em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }
        h2 { font-size: 1.5em; border-bottom: 1px solid #eaecef; padding-bottom: 0.3em; }
        p { margin: 1em 0; }
        code { 
            background-color: #f6f8fa;
            border-radius: 3px;
            font-family: monospace;
            padding: 0.2em 0.4em;
        }
        pre {
            background-color: #f6f8fa;
            border-radius: 3px;
            padding: 16px;
            overflow: auto;
        }
        pre code {
            background-color: transparent;
            padding: 0;
        }
        blockquote {
            border-left: 4px solid #dfe2e5;
            color: #6a737d;
            margin: 0;
            padding: 0 1em;
        }
        ul, ol {
            padding-left: 2em;
        }
        img {
            max-width: 100%;
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        table, th, td {
            border: 1px solid #dfe2e5;
            padding: 6px 13px;
        }
        th {
            background-color: #f6f8fa;
        }
        .metadata {
            color: #6a737d;
            font-size: 0.9em;
            margin-bottom: 2em;
            border-bottom: 1px solid #eaecef;
            padding-bottom: 1em;
        }
        .watermark {
            text-align: center;
            color: #6a737d;
            font-size: 0.8em;
            margin-top: 2em;
            padding-top: 1em;
            border-top: 1px solid #eaecef;
        }
    </style>
</head>
<body>`;

    // Add metadata if requested
    if (includeMetadata) {
      html += `
    <div class="metadata">
        <p><strong>Title:</strong> ${title}</p>
        <p><strong>Author:</strong> ${author}</p>
        <p><strong>Date Created:</strong> ${dateCreated.toLocaleDateString()}</p>
    </div>`;
    }

    // Add content and watermark
    html += `
    <div class="content">
        ${contentHtml}
    </div>
    <div class="watermark">
        <p>Generated by MagicMuse.io</p>
    </div>
</body>
</html>`;

    return html;
  }

  /**
   * Export content as HTML file
   */
  public async exportToHtml(content: string, options: ExportOptions = {}): Promise<void> {
    const { filename = 'document.html' } = options;
    
    // Convert markdown to HTML
    const html = this.markdownToHtml(content, options);
    
    // Create blob and trigger download
    const blob = new Blob([html], { type: 'text/html' });
    this.downloadBlob(blob, filename);
  }

  /**
   * Export content as PDF file
   */
  public async exportToPdf(content: string, options: ExportOptions = {}): Promise<void> {
    const { 
      filename = 'document.pdf',
      title = 'Untitled Document'
    } = options;
    
    // Convert markdown to HTML
    const html = this.markdownToHtml(content, options);
    
    // PDF export options
    const pdfOptions = {
      margin: [15, 15, 15, 15],
      filename,
      image: { type: 'jpeg', quality: 0.98 },
      html2canvas: { scale: 2, useCORS: true },
      jsPDF: { unit: 'mm', format: 'a4', orientation: 'portrait' },
    };

    try {
      // Generate PDF and trigger download
      await html2pdf().from(html).set(pdfOptions).save();
    } catch (error) {
      console.error('PDF export failed:', error);
      throw new Error('Failed to export as PDF');
    }
  }

  /**
   * Export content as DOCX file
   */
  public async exportToDocx(content: string, options: ExportOptions = {}): Promise<void> {
    const { 
      filename = 'document.docx',
      title = 'Untitled Document',
      author = 'MagicMuse.io',
      dateCreated = new Date()
    } = options;

    try {
      // Parse markdown to get sections
      const tokens = marked.lexer(content);
      
      // Create sections array for the document
      const sections = [];

      // Create metadata section if requested
      if (options.includeMetadata) {
        sections.push({
          properties: {},
          children: [
            new Paragraph({
              children: [
                new TextRun({
                  text: `Title: ${title}\n`,
                  bold: true,
                }),
                new TextRun({
                  text: `Author: ${author}\n`,
                  bold: true,
                }),
                new TextRun({
                  text: `Date Created: ${dateCreated.toLocaleDateString()}\n\n`,
                  bold: true,
                }),
              ],
            }),
          ],
        });
      }

      // Convert tokens to docx elements
      const children = tokens.reduce((acc: Paragraph[], token) => {
        if (token.type === 'heading') {
          acc.push(
            new Paragraph({
              children: [new TextRun(token.text)],
              heading: HeadingLevel[`HEADING_${token.depth}` as keyof typeof HeadingLevel],
            })
          );
        } else if (token.type === 'paragraph') {
          acc.push(
            new Paragraph({
              children: [new TextRun(token.raw)],
            })
          );
        } else if (token.type === 'code') {
          acc.push(
            new Paragraph({
              children: [
                new TextRun({
                  text: token.text,
                  font: 'Courier New',
                }),
              ],
            })
          );
        } else if (token.type === 'list_item') {
          acc.push(
            new Paragraph({
              children: [new TextRun(token.raw)],
              bullet: {
                level: 0,
              },
            })
          );
        } else {
          // Default case: treat as plain text
          acc.push(
            new Paragraph({
              children: [new TextRun(token.raw)],
            })
          );
        }
        return acc;
      }, []);

      // Create main content section
      sections.push({
        properties: {
          page: {
            margin: {
              top: 1440,
              right: 1440,
              bottom: 1440,
              left: 1440,
            },
          },
        },
        headers: {
          default: new Header({
            children: [
              new Paragraph({
                children: [new TextRun({ text: title, size: 20 })],
                alignment: 'right',
              }),
            ],
          }),
        },
        footers: {
          default: new Footer({
            children: [
              new Paragraph({
                children: [new TextRun({ text: 'Generated by MagicMuse.io', size: 16 })],
                alignment: 'center',
              }),
            ],
          }),
        },
        children,
      });

      // Create document with sections
      const doc = new Document({
        sections,
        styles: {
          default: {
            document: {
              run: {
                font: 'Calibri',
                size: 24, // 12pt
              },
            },
          },
        },
      });

      // Generate and download the document
      const buffer = await Packer.toBlob(doc);
      this.downloadBlob(buffer, filename);
    } catch (error) {
      console.error('DOCX export failed:', error);
      throw new Error('Failed to export as DOCX');
    }
  }

  /**
   * Export content as plain text file
   */
  public exportToText(content: string, options: ExportOptions = {}): void {
    const { filename = 'document.txt' } = options;
    
    // Create blob and trigger download
    const blob = new Blob([content], { type: 'text/plain' });
    this.downloadBlob(blob, filename);
  }

  /**
   * Helper method to download a blob as a file
   */
  private downloadBlob(blob: Blob, filename: string): void {
    // Create download link
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = filename;
    
    // Append to document, click, and remove
    document.body.appendChild(link);
    link.click();
    
    // Clean up
    setTimeout(() => {
      URL.revokeObjectURL(link.href);
      document.body.removeChild(link);
    }, 100);
  }
}

// Export singleton instance
export default new ContentExporter();
